import datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InputFile

from main import bot, dp
from config import admin_id
from config import path_to_project
from utils.keybord import *
from schedule.parser import Parser


# –ö–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ForParser(StatesGroup):
    amount = State()


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç(–¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –±–æ—Ç–æ–º)
@dp.message_handler(commands=['start'])
async def start(message: Message):
    await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu')


# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler(commands=['menu'], commands_prefix='!/')
async def show_menu(message: Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    msg = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu)

    await dp.current_state().update_data(menu_message_id=msg.message_id)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∫–æ–º–º–∞–Ω–¥ –º–µ–Ω—é
@dp.message_handler()
async def schedule(message: Message, state: FSMContext):
    if datetime.date.today().weekday() == 6:
        await message.answer(text='–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∫–∞–∫–∏–µ –ø–∞—Ä—ãü§®, –∏–¥–∏ –ø–æ—Å–ø–∏üòä')
    else:
        if message.text == 'üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            data = await state.get_data()
            menu_message_id = data.get('menu_message_id')
            #–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã '/menu'
            if menu_message_id:
                await bot.delete_message(chat_id=message.chat.id, message_id=menu_message_id)
            #–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º
            await message.answer(reply_markup=choice, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ')

    if message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await message.answer('–õ—É—á—à–µ –Ω–µ –ª–µ–∑—å —Å—é–¥–∞, —Ç—É—Ç –≤—Å–µ-—Ä–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É!)')


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏(–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫–æ–ª)
@dp.callback_query_handler(text='audit')    # –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ))))
async def audit(call: CallbackQuery):
    await call.answer(text='–ê –æ–Ω–æ —Ç–µ–±–µ –Ω–∞–¥–æ?ü§î', cache_time=60)
    await call.message.edit_reply_markup()

    await remove_schedule_message(call.message.chat.id, call.message.message_id)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞, –¥–ª—è –≥—Ä—É–ø–ø—ã
@dp.callback_query_handler(text='group')
async def group(call: CallbackQuery, state: FSMContext):
    search_type = '–≥—Ä—É–ø–ø–∞'
    #–í—ã–∑–æ–≤ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?', reply_markup=today_or_any_day)
    #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π search_type –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(search_type=search_type)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞, –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text='prepod')
async def prepod(call: CallbackQuery, state: FSMContext):
    search_type = '–ø—Ä–µ–ø–æ–¥'
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    #–ò–Ω–ª–∞–π–Ω –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    await call.message.answer(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?', reply_markup=today_or_any_day)
    #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π search_type –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(search_type=search_type)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
@dp.callback_query_handler(text='today')
async def today(call: CallbackQuery, state: FSMContext):
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    async with state.proxy() as data:
        if data.get('search_type') == '–≥—Ä—É–ø–ø–∞':
            await bot.send_message(chat_id=call.message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ö—É—Ä—Å/–ì—Ä—É–ø–ø–∞"\n'
                                        '–ü—Ä–∏–º–µ—Ä: 1/244')
        elif data.get('search_type') == '–ø—Ä–µ–ø–æ–¥':
            await bot.send_message(chat_id=call.message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–§–ò–û"\n')
    await ForParser.amount.set()


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
@dp.callback_query_handler(text='any_day')
async def any_day(call: CallbackQuery):

    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    #–í—ã–∑–æ–≤ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏(1 –∏–ª–∏ 2)
    await call.message.answer(text='–ö–∞–∫–∞—è –Ω–µ–¥–µ–ª—è?', reply_markup=weeks)


#–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –Ω–µ–¥–µ–ª–∏
@dp.callback_query_handler(text='first')
async def first(call: CallbackQuery, state: FSMContext):
    week = '1'
    await state.update_data(week=week)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(text='–ö–∞–∫–æ–π –¥–µ–Ω—å?', reply_markup=weekdays)


@dp.callback_query_handler(text='second')
async def second(call: CallbackQuery, state: FSMContext):
    week = '2'
    await state.update_data(week=week)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(text='–ö–∞–∫–æ–π –¥–µ–Ω—å?', reply_markup=weekdays)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
@dp.callback_query_handler(text='–ü–ù')
async def monday(call: CallbackQuery, state: FSMContext):
    weekday = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


@dp.callback_query_handler(text='–í–¢')
async def tuesday(call: CallbackQuery, state: FSMContext):
    weekday = '–í—Ç–æ—Ä–Ω–∏–∫'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


@dp.callback_query_handler(text='–°–†')
async def wednesday(call: CallbackQuery, state: FSMContext):
    weekday = '–°—Ä–µ–¥–∞'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


@dp.callback_query_handler(text='–ß–¢')
async def thursday(call: CallbackQuery, state: FSMContext):
    weekday = '–ß–µ—Ç–≤–µ—Ä–≥'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


@dp.callback_query_handler(text='–ü–¢')
async def friday(call: CallbackQuery, state: FSMContext):
    weekday = '–ü—è—Ç–Ω–∏—Ü–∞'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


@dp.callback_query_handler(text='–°–ë')
async def saturday(call: CallbackQuery, state: FSMContext):
    weekday = '–°—É–±–±–æ—Ç–∞'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ weekday –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.update_data(weekday=weekday)
    await remove_schedule_message(call.message.chat.id, call.message.message_id)
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é today, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∏ –≤–æ–π—Ç–∏ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await today(call, state)


#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
async def remove_schedule_message(chat_id, message_id):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass


#–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=ForParser.amount)
async def load_amount(message: Message, state: FSMContext):
    async with state.proxy() as data:
        # –±–µ—Ä—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        data['amount'] = message.text
        search_type = data.get('search_type')
        week = data.get('week')
        weekday = data.get('weekday')
    await state.finish()
    # –í—ã—á–∏—Å–ª—è–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ week –∏ weekday –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç None, –≤—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è,
    # –∏–Ω–∞—á–µ –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –¥–Ω—è
    if week is None and weekday is None:
        await bot.send_message(chat_id=message.from_user.id, text='–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é...')
        schedule_today = Parser(search_type, data['amount'], message.from_user.id)
        if schedule_today.get_schedule_today():
            photo_today = InputFile(f'{path_to_project}/schedule/Data/res{message.from_user.id}.png')
            await bot.send_photo(chat_id=message.from_user.id, photo=photo_today)
            msg_today = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu)
            await state.update_data(menu_message_id=msg_today.message_id)
            schedule_today.delete_cache()
            schedule_today.close_driver()
        else:
            await bot.send_message(chat_id=message.from_user.id, text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ('
                                                                      '\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù—É –ª–∏–±–æ'
                                                                      ' —Å–∞–π—Ç —Ö–∏–º–∞ —É–ø–∞–ª (:')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu)
    else:
        await bot.send_message(chat_id=message.from_user.id, text='–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é...')
        schedule_any_day = Parser(search_type, data['amount'], message.from_user.id)
        if schedule_any_day.get_schedule_on_any_day(week, weekday):
            photo_any_day = InputFile(f'{path_to_project}/schedule/Data/res{message.from_user.id}.png')
            await bot.send_photo(chat_id=message.from_user.id, photo=photo_any_day)
            msg_any_day = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu)
            await state.update_data(menu_message_id=msg_any_day.message_id)
            schedule_any_day.delete_cache()
            schedule_any_day.close_driver()
        else:
            await bot.send_message(chat_id=message.from_user.id, text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ('
                                                                      '\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù—É –ª–∏–±–æ'
                                                                      ' —Å–∞–π—Ç —Ö–∏–º–∞ —É–ø–∞–ª (:')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=menu)
